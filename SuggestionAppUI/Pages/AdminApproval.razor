@page "/AdminApproval"
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager


<h1>Pending Submissions</h1>

<div>
    <div>@submissions?.Count Submissions</div>
    <div>
        <button @onclick="ClosePage"></button>
    </div>
</div>

@if (submissions is not null)
{
    @foreach (var suggestion in submissions)
    {
        <div>
            <div>
                <button @onclick="(() => ApproveSubmission(suggestion))">Approve</button>
                <button @onclick="(() => RejectSubmission(suggestion))">Reject</button>
            </div>
            <div>
                <div>
                    @if (currentEditingTitle == suggestion.Id)
                    {
                        <EditForm Model="@editedTitle" OnSubmit="(() => SaveTitle(suggestion))">
                            <InputText @bind-Value="editedTitle"/>
                            <button type="submit">
                                <span class="oi oi-check"></span>
                            </button>
                            <button @onclick="(() => currentEditingTitle = string.Empty)">
                                <span class="oi oi-x"></span>
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        @suggestion.SuggestionContent
                        <span class ="oi oi-pencil" @onclick="(() => EditTitle(suggestion))"></span>
                    }
                </div>
                <div>
                    @suggestion.Category.Name
                </div>
                <div>
                    @suggestion.Author.DisplayName
                </div>
                <div>
                    @if (currentEditingDescription == suggestion.Id)
                    {
                        <EditForm Model="@editedDescription" OnSubmit="(() => SaveDescription(suggestion))">
                            <InputText @bind-Value="editedDescription"/>
                            <button type="submit">
                                <span class="oi oi-check"></span>
                            </button>
                            <button @onclick="(() => currentEditingDescription = string.Empty)">
                                <span class="oi oi-x"></span>
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        @suggestion.Description
                        <span class ="oi oi-pencil" @onclick="(() => EditDescription(suggestion))"></span>
                    }
                </div>
            </div>
        </div>
    }
}



@code {
    private List<Suggestion> submissions;
    private Suggestion editingModel;
    private string currentEditingTitle = string.Empty;
    private string editedTitle = string.Empty;
    private string currentEditingDescription = string.Empty;
    private string editedDescription = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        submissions = await suggestionData.GetAllSuggestionsWaitingForApproval();
    }

    private async Task ApproveSubmission(Suggestion submission)
    {
        submission.ApprovedForRelease = true;
        submissions.Remove(submission);

        await suggestionData.UpdateSuggestion(submission);
    }

    private async Task RejectSubmission(Suggestion submission)
    {
        submission.Rejected = true;
        submissions.Remove(submission);

        await suggestionData.UpdateSuggestion(submission);
    }

    private void EditTitle(Suggestion model)
    {
        editingModel = model;
        editedTitle = model.SuggestionContent;
        currentEditingTitle = model.Id;
        currentEditingDescription = model.Description;
    }

    private async Task SaveTitle(Suggestion model)
    {
        currentEditingTitle = string.Empty;
        model.SuggestionContent = editedTitle;
        await suggestionData.UpdateSuggestion(model);
    }

    private void EditDescription(Suggestion model)
    {
        editingModel = model;
        editedDescription = model.Description;
        currentEditingTitle = string.Empty;
        currentEditingDescription = model.Id;
    }

    
    private async Task SaveDescription(Suggestion model)
    {
        currentEditingDescription = string.Empty;
        model.Description = editedDescription;
        await suggestionData.UpdateSuggestion(model);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}