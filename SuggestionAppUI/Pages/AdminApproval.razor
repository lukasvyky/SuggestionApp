@page "/AdminApproval"
@attribute [Authorize(Policy = "Admin")]
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager


<h1 class="page-heading text-uppercase mb-4">Pending Submissions</h1>

<div class="row">
    <div class="suggestions-count col-8 mt-2">@submissions?.Count Submissions</div>
    <div class="col-4 close-button-section">
        <button class="btn btn-close" @onclick="ClosePage"></button>
    </div>
</div>

@if (submissions is not null)
{
    @foreach (var suggestion in submissions)
    {
        <div class="row submission">
            <div class="col-lg-2 col-md-3 col-sm-4">
                <button class="btn btn-approve" @onclick="(() => ApproveSubmission(suggestion))">Approve</button>
                <button class="btn btn-reject" @onclick="(() => RejectSubmission(suggestion))">Reject</button>
            </div>
            <div class="col-lg-10 col-md-9 col-sm-8">
                <div>
                    @if (currentEditingTitle == suggestion.Id)
                    {
                        <EditForm class="approval-edit-form" Model="@editedTitle" OnSubmit="(() => SaveTitle(suggestion))">
                            <InputText class="form-control approval-edit-field" @bind-Value="editedTitle"/>
                            <button class="btn" type="submit">
                                <span class="oi oi-check submission-edit-approve"></span>
                            </button>
                            <button type="button" class="btn" @onclick="(() => currentEditingTitle = string.Empty)">
                                <span class="oi oi-x submission-edit-reject"></span>
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        @suggestion.SuggestionContent
                        <span class="oi oi-pencil suggestion-edit-icon" @onclick="(() => EditTitle(suggestion))"></span>
                    }
                </div>
                <div>
                    @suggestion.Category.Name
                </div>
                <div>
                    @suggestion.Author.DisplayName
                </div>
                <div>
                    @if (currentEditingDescription == suggestion.Id)
                    {
                        <EditForm class="approval-edit-form" Model="@editedDescription" OnSubmit="(() => SaveDescription(suggestion))">
                            <InputText class="form-control approval-edit-field" @bind-Value="editedDescription"/>
                            <button class="btn" type="submit">
                                <span class="oi oi-check submission-edit-approve"></span>
                            </button>
                            <button type="button" class="btn" @onclick="(() => currentEditingDescription = string.Empty)">
                                <span class="oi oi-x submission-edit-reject"></span>
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        @suggestion.Description
                        <span class ="oi oi-pencilsubmission-edit-icon" @onclick="(() => EditDescription(suggestion))"></span>
                    }
                </div>
            </div>
        </div>
    }
}

@code {
    private List<Suggestion> submissions;
    private Suggestion editingModel;
    private string currentEditingTitle = string.Empty;
    private string editedTitle = string.Empty;
    private string currentEditingDescription = string.Empty;
    private string editedDescription = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        submissions = await suggestionData.GetAllSuggestionsWaitingForApproval();
    }

    private async Task ApproveSubmission(Suggestion submission)
    {
        submission.ApprovedForRelease = true;
        submissions.Remove(submission);

        await suggestionData.UpdateSuggestion(submission);
    }

    private async Task RejectSubmission(Suggestion submission)
    {
        submission.Rejected = true;
        submissions.Remove(submission);

        await suggestionData.UpdateSuggestion(submission);
    }

    private void EditTitle(Suggestion model)
    {
        editingModel = model;
        editedTitle = model.SuggestionContent;
        currentEditingTitle = model.Id;
        currentEditingDescription = string.Empty;
    }

    private async Task SaveTitle(Suggestion model)
    {
        currentEditingTitle = string.Empty;
        model.SuggestionContent = editedTitle;
        await suggestionData.UpdateSuggestion(model);
    }

    private void EditDescription(Suggestion model)
    {
        editingModel = model;
        editedDescription = model.Description;
        currentEditingTitle = string.Empty;
        currentEditingDescription = model.Id;
    }

    
    private async Task SaveDescription(Suggestion model)
    {
        currentEditingDescription = string.Empty;
        model.Description = editedDescription;
        await suggestionData.UpdateSuggestion(model);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}