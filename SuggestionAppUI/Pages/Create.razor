@page "/Create"
@attribute [Authorize]
@using SuggestionAppUI.Components
@using SuggestionAppUI.ViewModels
@inject AuthenticationStateProvider authProvider
@inject ICategoryData categoryData
@inject ISuggestionData suggestionData
@inject NavigationManager navManager
@inject IUserData userData

<h1>Make a Suggestion</h1>

<div>
    <div>
        <div>
            <button @onclick="ClosePage"></button>
        </div>
        @if (categories is not null)
        {

        }

        <EditForm Model="suggestion" OnValidSubmit="CreateSuggestion">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label for="suggestion-text">Suggestion</label>
                <div>Tell me what you wanna learn</div>
                <InputText id="suggestion-text" @bind-Value="suggestion.SuggestionContent" />
            </div>
            <div>
                <label for="category">Category</label>
                <div>Choose one category</div>
                <div>
                    <CustomInputRadioGroup id="category" @bind-Value="suggestion.CategoryId">
                        @foreach (var category in categories)
                        {
                            <div>
                                <InputRadio Value="@category.Id" id="@category.Id"/>
                                <label for="@category.Id">@category.Name - @category.Description</label>
                            </div>
                        }
                    </CustomInputRadioGroup>
                </div>
            </div>


            <div>
                <label for="description">Description</label>
                <div>Tell me what you wanna learn</div>
                <InputTextArea id="description" @bind-Value="suggestion.Description" />
            </div>
            <div>
                <button type="submit">Suggest</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CreateSuggestionViewModel suggestion = new();
    private List<Category> categories;
    private User loggedInUser;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetCategories();
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        loggedInUser = await userData.GetUserFromAuthentication("objectId");
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task CreateSuggestion()
    {
        Suggestion s = new();
        s.SuggestionContent = suggestion.SuggestionContent;
        s.Description = suggestion.Description;
        s.Author = new BasicUser(loggedInUser);
        s.Category = categories.FirstOrDefault(c => c.Id == suggestion.CategoryId);

        await suggestionData.CreateSuggestion(s);
        suggestion = new();
        ClosePage();
    }
}