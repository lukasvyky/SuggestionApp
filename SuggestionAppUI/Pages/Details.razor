@page "/Details/{Id}"
@inject ISuggestionData suggestionData
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject IUserData userData

<h1 class="page-heading text-uppercase mb-4">Suggestion Details</h1>

<div class="row justify-content-center">
    <div class="col-xl-8 col-lg-10 form-layout">
        @if (suggestion is not null)
        {
            <div class="row suggestion-detail-row">
                <div class="col-11 suggestion-detail">
                    <div>
                        <div class="@GetVoteClass()" @onclick="VoteUp">
                            <div class="text-uppercase">@GetUpvoteTopText()</div>
                            <span class="oi oi-caret-top detail-upvote"></span>
                            <div class="text-uppercase">@GetUpvoteBottomText()</div>
                        </div>
                        <div class="suggestion-detail-date">
                            <div>@suggestion.DateCreated.ToString("MM.dd.yyyy")</div>
                        </div>
                    </div>
                    <div class="suggestion-detail-text">
                        <div class="fw-bold mb-2 suggestion-detail-suggestion">@suggestion.SuggestionContent</div>
                        <div class="mb-2 suggestion-detail-author">@suggestion.Author?.DisplayName</div>
                        <div class="mb-2">@suggestion.Description</div>
                        <div class="suggestion-entry-text-category">@suggestion.Category?.Name</div>
                    </div>
                </div>

                <div class="col-1 close-button-section">
                    <button class="btn btn-close" @onclick="ClosePage"></button>
                </div>
            </div>
        }
    </div>
</div>

@if (suggestion?.Status is not null)
{
    <div class="row justify-content-center">
        <div class="col-xl-8 col-lg-10 suggestion-results form-layout">
            <div class="@GetStatusClass()"></div>
            <div class="suggestion-detail-status-section">
                <div class="suggestion-detail-status fw-bold mb-2 suggestion-detail-suggestion">
                    @suggestion.Status.Name
                </div>
                <div class="suggestion-detail-owner-notes">
                    @((MarkupString)suggestion.AdminNotes)
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Suggestion suggestion;
    private User loggedInUser;

    protected async override Task OnInitializedAsync()
    {
        suggestion = await suggestionData.GetSuggestion(Id);
        loggedInUser = await authProvider.GetUserFromAuth(userData);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private string GetUpvoteTopText()
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }

        if (suggestion.Author.Id == loggedInUser?.Id)
        {
            return "Awaiting";
        }

        return "Click To";
    }

    private string GetUpvoteBottomText()
    {
        bool isPlural = suggestion.UserVotes?.Count > 1;

        return $"Upvote{(isPlural ? "s" : string.Empty)}";
    }

    private async Task VoteUp()
    {
        if (loggedInUser is null)
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
        else
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
                return;
            }

            if (!suggestion.UserVotes.Add(loggedInUser.Id))
            {
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            await suggestionData.UpvoteSuggestion(suggestion.Id, loggedInUser.Id);
        }
    }
    private string GetVoteClass()
    {
        if (suggestion.UserVotes is null || suggestion.UserVotes.Count == 0)
        {
            return "suggestion-detail-no-votes";
        }
        else if (suggestion.UserVotes.Contains(loggedInUser?.Id))
        {
            return "suggestion-detail-voted";
        }
        else
        {
            return "suggestion-detail-not-voted";
        }
    }

    private string GetStatusClass()
    {

        if (suggestion is null || suggestion.Status is null)
        {
            return "suggestion-detail-status-none";
        }

        string output = suggestion.Status.Name switch
        {
            "Completed" => "suggestion-detail-status-completed",
            "Watching" => "suggestion-detail-status-watching",
            "Upcoming" => "suggestion-detail-status-upcoming",
            "Dismissed" => "suggestion-detail-status-dismissed",
            _ => "suggestion-detail-status-none",
        };

        return output;
    }
}
