@page "/Profile"
@attribute [Authorize]
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager


<h1>My Profile</h1>

<div>
    <div>
        <button @onclick="ClosePage"></button>
    </div>
</div>

<div>
    <h2>My Account</h2>
    <p>
        <a href="MicrosoftIdentity/Account/EditProfile">Edit my profile</a>
    </p>
</div>

@if (approved?.Count > 0)
{
   <div>
    <h2>Approved Suggestions</h2>
    <p>These are your currently active suggestions</p>

    @foreach (var suggestion in approved)
    {
        <hr />
        <div>
            @suggestion.SuggestionContent
        </div>
        <p>
            @suggestion.DateCreated.ToString("MM.dd.yyyy")
        </p>
        <p>
            Total votes: @suggestion.UserVotes.Count
        </p>
        <p>
            @suggestion.Category.Name
        </p>
        <p>
            @suggestion.Description
        </p>
        @if (suggestion.Status is not null)
        {
            <div>
                @suggestion.Status.Name
            </div>
            <p>
                @((MarkupString)suggestion.AdminNotes)
            </p>
        }
    }
</div> 
}

@if (archived?.Count > 0)
{
   <div>
    <h2>Archived Suggestions</h2>
    <p>There are your currently archived suggestions</p>

    @foreach (var suggestion in archived)
    {
        <hr />
        <div>
            @suggestion.SuggestionContent
        </div>
        <p>
            @suggestion.DateCreated.ToString("MM.dd.yyyy")
        </p>
        <p>
            Total votes: @suggestion.UserVotes.Count
        </p>
        <p>
            @suggestion.Category.Name
        </p>
        <p>
            @suggestion.Description
        </p>
        @if (suggestion.Status is not null)
        {
            <div>
                @suggestion.Status.Name
            </div>
            <p>
                @((MarkupString)suggestion.AdminNotes)
            </p>
        }
    }
</div> 
}

@if (pending?.Count > 0)
{
   <div>
    <h2>Pending Suggestions</h2>
    <p>There are your currently pending suggestions</p>

    @foreach (var suggestion in pending)
    {
        <hr />
        <div>
            @suggestion.SuggestionContent
        </div>
        <p>
            @suggestion.DateCreated.ToString("MM.dd.yyyy")
        </p>
        <p>
            Total votes: @suggestion.UserVotes.Count
        </p>
        <p>
            @suggestion.Category.Name
        </p>
        <p>
            @suggestion.Description
        </p>
        @if (suggestion.Status is not null)
        {
            <div>
                @suggestion.Status.Name
            </div>
            <p>
                @((MarkupString)suggestion.AdminNotes)
            </p>
        }
    }
</div> 
}

@if (rejected?.Count > 0)
{
   <div>
    <h2>Rejected Suggestions</h2>
    <p>There are your currently rejected suggestions</p>

    @foreach (var suggestion in rejected)
    {
        <hr />
        <div>
            @suggestion.SuggestionContent
        </div>
        <p>
            @suggestion.DateCreated.ToString("MM.dd.yyyy")
        </p>
        <p>
            Total votes: @suggestion.UserVotes.Count
        </p>
        <p>
            @suggestion.Category.Name
        </p>
        <p>
            @suggestion.Description
        </p>
        @if (suggestion.Status is not null)
        {
            <div>
                @suggestion.Status.Name
            </div>
            <p>
                @((MarkupString)suggestion.AdminNotes)
            </p>
        }
    }
</div> 
}


@code {
    private User loggedInUser;

    private List<Suggestion> submissions;
    private List<Suggestion> approved;
    private List<Suggestion> archived;
    private List<Suggestion> pending;
    private List<Suggestion> rejected;

    protected async override Task OnInitializedAsync()
    {
        // Todo - replace with real logged in user
        loggedInUser = await userData.GetUserFromAuthentication("abc-123");

        var result = await suggestionData.GetUsersSuggestions(loggedInUser.Id);

        if (loggedInUser is not null && result is not null)
        {
            submissions = result.OrderByDescending(s => s.DateCreated).ToList();
            approved = submissions.Where(s => s.ApprovedForRelease && !s.Archived && !s.Rejected).ToList();
            archived = submissions.Where(s => s.Archived && !s.Rejected).ToList();
            pending = submissions.Where(s => !s.ApprovedForRelease && !s.Rejected).ToList();
            rejected = submissions.Where(s => s.Rejected).ToList();
        }

    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
