@page "/"

@inject ICategoryData categoryData
@inject IStatusData statusData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

@code {
    private List<Suggestion> suggestions;
    private List<Category> categories;
    private List<Status> statuses;

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = string.Empty;
    private bool isSortedByNew = true;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetCategories();
        statuses = await statusData.GetStatuses();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : string.Empty;

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = stringResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetApprovedSuggestions();

        if (selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.Name == selectedCategory).ToList();
        }

        if (selectedStatus != "All")
        {
            output = output.Where(s => s.Status?.Name == selectedStatus).ToList();
        }

        if (!String.IsNullOrWhiteSpace(searchText))
        {
            output = output.Where(
                 s => s.SuggestionContent.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                 s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
                 .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count)
                           .ThenByDescending(s => s.DateCreated)
                           .ToList();        
        }

        suggestions = output;

        await SaveFilterState();
    }
}