@page "/"
@inject AuthenticationStateProvider authProvider
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1 class="page-heading text-uppercase mb-4">Training Suggestions</h1>
<div class="suggestion-container">
    <button @onclick="LoadCreatePage" class="suggest-btn btn btn-outline-light btn-lg text-uppercase">Suggest</button>
</div>

<div class="row">
    <div class="suggestions-count col-md-4 text-light mt-2">@suggestions?.Count Suggestions</div>
    <div class="col-md-4 col-xl-5">
        <button class="btn btn-order" @onclick="(() => OrderByNew())">@(isSortedByNew ? "New" : "Popular")</button>
    </div>
    <div class="col-md-4 col-xl-3 search-box">
        <input type="text" placeholder="Search" aria-label="Search box" class="form-control rounded-control" @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    </div>
</div>

<div class="row">
    <div class="col-md-8 col-xl-9">
        @if (suggestions is not null)
        {
            <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
                <div class="suggestion-entry">
                    <div class="@GetVoteClass(s)" @onclick="(() => VoteUp(s))">
                        <div class="text-uppercase">@GetUpvoteTopText(s)</div>
                        <span class="oi oi-caret-top" style="font-size:3rem;"></span>
                        <div class="text-uppercase">@GetUpvoteBottomText(s)</div>
                    </div>
                    <div class="suggestion-entry-text">
                        <div class="suggestion-entry-text-title" @onclick="(() => OpenDetails(s))">
                            @s.SuggestionContent
                        </div>
                        <div>
                            <div class="suggestion-entry-text-category" @onclick="(() => OpenDetails(s))">
                                @s.Category?.Name
                            </div>
                        </div>
                    </div>
                    <div class="suggestion-entry-status @GetSuggestionStatusClass(s)">
                        <div class="suggestion-entry-status-text">
                            @s.Status?.Name
                        </div>
                    </div>
                </div>
                <hr>
            </Virtualize>
        }
    </div>
    <div class="col-md-4 col-xl-3">
        @if (categories is not null)
        {
            <div class="categories">
                <span class="text-uppercase fw-bold">Category</span>
                <div class="@GetSelectedCategory()" @onclick="(() => OnCategoryClick())">All</div>
                @foreach (var cat in categories)
                {
                    <div class="@GetSelectedCategory(cat.Name)" @onclick="(() => OnCategoryClick(cat.Name))">@cat.Name</div>
                }
            </div>
        }
        <hr>
        @if (statuses is not null)
        {
            <div class="statuses">
                <span class="text-uppercase fw-bold">Status</span>
                <div class="@GetSelectedStatus()" @onclick="(() => OnStatusClick())">All</div>
                @foreach (var status in statuses)
                {
                    <div class="@GetSelectedStatus(status.Name)"@onclick="(() => OnStatusClick(status.Name))">@status.Name</div>
                }
            </div>
        }
    </div>
</div>

@code {
    private User loggedInUser;
    private List<Suggestion> suggestions;
    private List<Category> categories;
    private List<Status> statuses;

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = string.Empty;
    private bool isSortedByNew = true;

    private void LoadCreatePage()
    {
        if (loggedInUser is not null)
        {
            navManager.NavigateTo("/Create");
        }
        navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
    }
    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetCategories();
        statuses = await statusData.GetStatuses();
        await LoadAndVerifyUser();
    }

    private async Task LoadAndVerifyUser()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        if (!String.IsNullOrWhiteSpace(objectId))
        {
            loggedInUser = await userData.GetUserFromAuthentication(objectId) ?? new();

            string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

            bool isDirty = false;
            if (loggedInUser.ObjectIdentifier != objectId)
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }

            if (loggedInUser.FirstName != firstName)
            {
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }

            if (loggedInUser.LastName != lastName)
            {
                isDirty = true;
                loggedInUser.LastName = lastName;
            }

            if (loggedInUser.DisplayName != displayName)
            {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }

            if (loggedInUser.EmailAddress != email)
            {
                isDirty = true;
                loggedInUser.EmailAddress = email;
            }

            if (isDirty)
            {
                if (String.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await userData.CreateUser(loggedInUser);
                }
                else
                {
                    await userData.UpdateUser(loggedInUser);
                }
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : string.Empty;

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = stringResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetApprovedSuggestions();

        if (selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.Name == selectedCategory).ToList();
        }

        if (selectedStatus != "All")
        {
            output = output.Where(s => s.Status?.Name == selectedStatus).ToList();
        }

        if (!String.IsNullOrWhiteSpace(searchText))
        {
            output = output.Where(
                 s => s.SuggestionContent.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                 s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
                 .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count)
                           .ThenByDescending(s => s.DateCreated)
                           .ToList();
        }

        suggestions = output;

        await SaveFilterState();
    }

    private async Task OrderByNew()
    {
        isSortedByNew = !isSortedByNew;
        await FilterSuggestions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();
    }

    private async Task VoteUp(Suggestion suggestion)
    {
        if (loggedInUser is null)
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
        else
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
                return;
            }

            if (!suggestion.UserVotes.Add(loggedInUser.Id))
            {
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            await suggestionData.UpvoteSuggestion(suggestion.Id, loggedInUser.Id);

            if (!isSortedByNew)
            {
                suggestions = suggestions.OrderByDescending(s => s.UserVotes.Count)
                                         .ThenByDescending(s => s.DateCreated)
                                         .ToList();
            }
        }
    }

    private string GetUpvoteTopText(Suggestion suggestion)
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }

        if (suggestion.Author.Id == loggedInUser?.Id)
        {
            return "Awaiting";
        }

        return "Click To";
    }

    private string GetUpvoteBottomText(Suggestion suggestion)
    {
        bool isPlural = suggestion.UserVotes?.Count > 1;

        return $"Upvote{(isPlural ? "s" : string.Empty)}";
    }

    private void OpenDetails(Suggestion suggestion)
    {
        navManager.NavigateTo($"details/{suggestion.Id}");
    }

    private string GetVoteClass(Suggestion suggestion)
    {
        if (suggestion.UserVotes is null || suggestion.UserVotes.Count == 0)
        {
            return "suggestion-entry-no-votes";
        }
        else if (suggestion.UserVotes.Contains(loggedInUser?.Id))
        {
            return "suggestion-entry-voted";
        }
        else
        {
            return "suggestion-entry-not-voted";
        }
    }

    private string GetSuggestionStatusClass(Suggestion suggestion)
    {
        if (suggestion is null || suggestion.Status is null)
        {
            return "suggestion-entry-status-none";
        }

        string output = suggestion.Status.Name switch
        {
            "Completed" => "suggestion-entry-status-completed",
            "Watching" => "suggestion-entry-status-watching",
            "Upcoming" => "suggestion-entry-status-upcoming",
            "Dismissed" => "suggestion-entry-status-dismissed",
            _ => "suggestion-entry-status-none",
        };

        return output;
    }

    private string GetSelectedCategory(string category = "All")
    {
        if (category == selectedCategory)
        {
            return "selected-category";
        }
        return string.Empty;
    }

    private string GetSelectedStatus(string status = "All")
    {
        if (status == selectedStatus)
        {
            return "selected-status";
        }
        return string.Empty;
    }
}